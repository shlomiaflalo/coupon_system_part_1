package db;

import beans.Category;
import beans.Company;
import beans.Coupon;
import beans.Customer;
import dao.dbdao.CategoryDBDAO;
import dao.dbdao.CompanyDBDAO;
import dao.dbdao.CouponDBDAO;
import dao.dbdao.CustomerDBDAO;

import java.sql.Date;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.concurrent.ThreadLocalRandom;

/**
 * The InitializeDataBase class is responsible for initially populating the database
 * with dummy data, such as companies, coupons, customers, categories, and purchases.
 * It provides utility methods to generate and insert data into the database tables
 * in a randomized manner.
 */
public class InitializeDataBase {

    private static final int MAX_PURCHASES = 9 ;
    private static int sizeOfRandomCompanies;

    // This method generates company records and inserts them into the database.
   // The number of companies inserted is random, and the data is retrieved from predefined sources.
    private static void generateDummyCompanies() {

        // Randomly determine the number of companies to be inserted,
        //between 10 and the size of the list of available company emails.
        //This uses ThreadLocalRandom to ensure thread safety when generating random numbers.
        int randomCompaniesLength = ThreadLocalRandom.current().nextInt(10,
                DataBaseRandomData.companyEmailsForDB().size());

        // Set the sizeOfRandomCompanies static field to the number of companies that will be generated.
        // This value is later used in the generateDummyCoupons()
        // method to select a random company ID that exists in the database.

        //This static field is for generateDummyCoupons() method for choosing a random company id that exists in the current database using
        //ThreadLocalRandom.current().nextInt(1, sizeOfRandomCompanies);
        sizeOfRandomCompanies = randomCompaniesLength;

        // Loop to create and insert the random number of companies into the database.
        // Note that the loop runs from 0 to randomCompaniesLength (inclusive).

        //Each initialization of the database will be inserted different rows of different companies
        for (int i = 0; i <= randomCompaniesLength; i++) {

            // Retrieve the company email from the predefined list of company emails.
            String companyEmail = DataBaseRandomData.companyEmailsForDB().get(i);

            // Create a new Company object using the following parameters:
            // 1. An ID of 0 (indicating that the database will assign the ID).
            // 2. The company name, which is derived from the email address (substring between '@' and '.').
            // 3. The company email (directly taken from the predefined list).
            // 4. The company password, retrieved from a predefined list of passwords.
            // 5. A null value for any other property (e.g., company address, if it's not used).
            Company company = new Company(
                    0, // ID will be auto-generated by the database.
                    companyEmail.substring(companyEmail.indexOf("@") + 1, companyEmail.indexOf(".")), // Company name derived from the email.
                    companyEmail, // The email itself.
                    DataBaseRandomData.passwords().get(i), // Password corresponding to the email.
                    null //For coupons
            );

            try {
                // Insert the created company into the database using the CompanyDBDAO instance.
                CompanyDBDAO.getInstance().add(company);
            } catch (SQLException e) {
                // If an SQL error occurs during insertion, throw a RuntimeException.
                // This ensures that the error is propagated and can be handled elsewhere.
                throw new RuntimeException(e);
            }
        }
    }


    private static void generateDummyCoupons() {
        int randomCouponsLength = ThreadLocalRandom.current().nextInt(10,
                DataBaseRandomData.titlesForCoupons().size());
        for (int i = 0; i < randomCouponsLength; i++) {

            int randomCompanyId = ThreadLocalRandom.current().nextInt(1, sizeOfRandomCompanies);
            int couponsAmount= ThreadLocalRandom.current().nextInt(10, 500);
            double priceForCoupon =ThreadLocalRandom.current().nextInt(50, 700);
            int plusDaysRandom = ThreadLocalRandom.current().nextInt(2, 10);

            Coupon coupon = new Coupon(0, randomCompanyId, Category.getRandomCategory(),
                    DataBaseRandomData.titlesForCoupons().get(i), DataBaseRandomData.descriptionForCoupons().get(i), Date.valueOf(LocalDate.now()),
                    Date.valueOf(LocalDate.now().plusDays(plusDaysRandom)), couponsAmount, priceForCoupon, "image " + i);
            try {
                CouponDBDAO.getInstance().add(coupon);
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }
    }

    private static void generateDummyCustomers() {
        int randomCustomersLength = ThreadLocalRandom.current().nextInt(10,
                DataBaseRandomData.personalEmailsForDB().size());
        for (int i = 0; i <randomCustomersLength; i++) {

            String randomFirstName = DataBaseRandomData.firstNames().
                    get(ThreadLocalRandom.current().nextInt(0, DataBaseRandomData.firstNames().size()));

            String randomLastName = DataBaseRandomData.lastNames().
                    get(ThreadLocalRandom.current().nextInt(0, DataBaseRandomData.lastNames().size()));

            String []domains ={"@yahoo.com","@gmail.com","@CouponSystem.com"};
            Customer customer = new Customer(0,randomFirstName,
                    randomLastName, randomFirstName+"."+randomLastName+domains[ThreadLocalRandom.current().nextInt(0,domains.length)],
                    DataBaseRandomData.passwords().get(i), null);
            try {
                CustomerDBDAO.getInstance().add(customer);
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }
    }


    public static void initializationCategories() {
        for (Category category : Category.values()) {
            try {
                CategoryDBDAO.getInstance().add(category);
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }
    }

    private static void generateDummyPurchases() {
        for (int i = 1, j = 1; i <= MAX_PURCHASES && j <= MAX_PURCHASES; i++, j++) {
            try {
                //i + j is for the customerId & couponId in the purchaseCoupon method. i-> customerId j->couponId
                CouponDBDAO.getInstance().purchaseCoupon(i, j);
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }
    }


    public static void initializeAllData() {
        initializationCategories();
        generateDummyCompanies();
        generateDummyCoupons();
        generateDummyCustomers();
        generateDummyPurchases();
    }

}
